---
title: "Exploration of Czech data"
---

This is intended as an exploration of the dataset published in Poetics. The dataset could be used for comparison of disciplines and the general scientific field. 

```{r}
lapply(list.files(here::here("R"), full.names = T), source)
lib_require("tidyverse")
lib_require("here")
lib_require("arrow")
```

For simplicity's sake, I am downloading an already calculated PCA projection of individuals (should be 42 PCs for 42 disciplinary categories).

```{r}
pca_data <- list(
  source = "https://owncloud.cesnet.cz/index.php/s/JHZrStMPTtQcd8F/download",
  path = here::here("data", "pca_projection_full.RDS")
)
data_require(pca_data)  
pca_projection <- as_tibble(readRDS(pca_data$path))
```

This is the original PC object with topics in rows and disciplines in columns 
```{r}
pca_src_data <- list(
  source = "https://owncloud.cesnet.cz/index.php/s/Bf3Qqn2S2GX1AEL/download",
  path = here::here("data", "pca_src.RDS")
)
data_require(pca_src_data)
pca_src <- readRDS(pca_src_data$path)
```

Download topic distributions.

```{r}
topmodel_data <- list(
  source = "https://osf.io/download/45f2b/",
  path = here::here("data", "topic_model_202207170249_topics_level_1.feather")
)
data_require(topmodel_data)
topmodel <- arrow::read_feather(topmodel_data$path) |> select(-level)
```

Download document distributions.

```{r}
docmodel_data <- list(
  source = "https://osf.io/download/hvqs9/",
  path = here::here("data", "topic_model_202207170249_documents_level_1.feather")
)
data_require(docmodel_data)
docmodel <- arrow::read_feather(docmodel_data$path) |> rename(id_unique = doc) |> mutate(id_unique = as.integer(id_unique))
```

Download people-papers.

```{r}
people_pubs_data <- list(
  source = "https://osf.io/download/ynxsg/",
  path = here::here("data", "authors_by_pubs.arrow")
)
data_require(people_pubs_data)
people_pubs <- arrow::read_feather(people_pubs_data$path) 
```



- the dataframe is nested by discipline (disciplinary subclouds)
- a new PCA runs for each nested block (with original PCA coordinates as variables)

```{r}
sub_pca_df <- pca_projection |> 
select(freq_ford, starts_with("PC")) |> 
rename_with(~ paste0("global_", .x), starts_with("PC")) |> 
nest(mat = starts_with("global_PC")) |> 
mutate(
  sub_pca_unscaled = map(mat, prcomp, scale = F)
  ) |> 
select(-mat)
```

- for each block, we extract some information from its specific PCA

```{r}

sub_pca_enriched <- sub_pca_df |> 
  mutate(
    subcloud_center_coords = map(sub_pca_unscaled, ~ .x$center),
    local_pc1_explained_var = map_dbl(sub_pca_unscaled, ~ .x$sdev[1]^2/sum(.x$sdev^2)),
    local_pc2_explained_var = map_dbl(sub_pca_unscaled, ~ .x$sdev[2]^2/sum(.x$sdev^2)),
    local_sdev = map(sub_pca_unscaled, ~ .x$sdev),
    global_pc_names = map(sub_pca_unscaled, ~ rownames(.x$rotation)), 
    local_pc_1_2_cum_explained_var = local_pc1_explained_var + local_pc2_explained_var,
    loading_vector_on_local_PC1 = map(sub_pca_unscaled, ~ .x$rotation[, 1]),
    loading_vector_on_local_PC2 = map(sub_pca_unscaled, ~ .x$rotation[, 2]),
    loading_global_pc1_on_local_PC1 = map_dbl(sub_pca_unscaled, ~ .x$rotation["global_PC1", "PC1"]),
    loading_global_pc1_on_local_PC2 = map_dbl(sub_pca_unscaled, ~ .x$rotation["global_PC1", "PC2"]),
    loading_global_pc2_on_local_PC1 = map_dbl(sub_pca_unscaled, ~ .x$rotation["global_PC2", "PC1"]),
    loading_global_pc2_on_local_PC2 = map_dbl(sub_pca_unscaled, ~ .x$rotation["global_PC2", "PC2"]),
        combined_contribution_to_localPC1 = loading_global_pc1_on_local_PC1^2 + loading_global_pc2_on_local_PC1^2,
    total_variance = map_dbl(sub_pca_unscaled, ~ sum(.x$sdev^2))
    ) |> 
      select(-sub_pca_unscaled)
```

first plot

```{r}
scaling_factor <- 0.3
plot_data <- sub_pca_enriched |>
  select(freq_ford, 
  subcloud_center_coords, 
  loading_global_pc1_on_local_PC1, 
  loading_global_pc1_on_local_PC2,
  loading_global_pc2_on_local_PC1, loading_global_pc2_on_local_PC2) |> 
  mutate(
    center_x = map_dbl(subcloud_center_coords, ~ .x[1]),
    center_y = map_dbl(subcloud_center_coords, ~ .x[2]),
    loc_pc1_x = loading_global_pc1_on_local_PC1 * scaling_factor,
    loc_pc1_y = loading_global_pc2_on_local_PC1 * scaling_factor,   loc_pc2_x = loading_global_pc1_on_local_PC2 * scaling_factor,
    loc_pc2_y = loading_global_pc2_on_local_PC2 * scaling_factor
  ) |> 
  select(-subcloud_center_coords)

plot_data |> 
ggplot(aes(x = center_x, y = center_y, color = freq_ford)) +
geom_point() +
  geom_segment(
    aes(
      x = center_x - loc_pc1_x,
      y = center_y - loc_pc1_y,
      xend = center_x + loc_pc1_x,
      yend = center_y + loc_pc1_y
    ),
    color = "red", linewidth = 1 ) +
      theme(legend.position = "none") +
      # PC 2 segment in global space
  geom_segment(
    aes(
      x = center_x - loc_pc2_x,
      y = center_y - loc_pc2_y,
      xend = center_x + loc_pc2_x,
      yend = center_y + loc_pc2_y
    ),
    color = "blue", linewidth = 1) +
  #coord_equal() +
  theme_minimal() + 
   theme(legend.position = "none") + 
  labs(x = "Global PC1", y = "Global PC2",
       title = "Local PCA Axes within Global PCA Space") +
        facet_wrap(~ freq_ford, scales = "free")
```
