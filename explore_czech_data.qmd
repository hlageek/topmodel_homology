---
title: "Exploration of Czech data"
---

This is intended as an exploration of the dataset published in Poetics. The dataset could be used for comparison of disciplines and the general scientific field. 

```{r}
lapply(list.files(here::here("R"), full.names = T), source)
lib_require("tidyverse")
lib_require("here")
lib_require("arrow")
```

For simplicity's sake, I am downloading an already calculated PCA projection of individuals. One thing to note is that this data object only contains 10 PC components. It would have been better to use all PCs, but for exploration, this should be enough. 

```{r}
pca_data <- list(
  source = "https://owncloud.cesnet.cz/index.php/s/JHZrStMPTtQcd8F/download",
  path = here::here("data", "pca_projection.RDS")
)
data_require(pca_data)  
pca_projection <- as_tibble(readRDS(pca_data$path))
```

This is the original PC object with topics in rows and disciplines in columns 
```{r}
pca_src_data <- list(
  source = "https://owncloud.cesnet.cz/index.php/s/Bf3Qqn2S2GX1AEL/download",
  path = here::here("data", "pca_src.RDS")
)
data_require(pca_src_data)
pca_src <- readRDS(pca_src_data$path)
```

```{r}
topmodel_data <- list(
  source = "https://osf.io/download/45f2b/",
  path = here::here("data", "topic_model_202207170249_topics_level_1.feather")
)
data_require(topmodel_data)
topmodel <- arrow::read_feather(topmodel_data$path) |> select(-level)
```

This is the tricky part of the code where we try to obtain the eigenvectors of the principal components of the sub-clouds as they would appear in the original set of coordinates. 

```{r}
sub_pca <- pca_projection |> 
select(freq_ford, starts_with("PC")) |> 
rename_with(~ paste0("orig_", .x), starts_with("PC")) |> 
nest(mat = starts_with("orig_PC")) |> 
mutate(pca = map(mat, prcomp, scale = F)) |> 
mutate(axis1 = map(pca, .f = function(x) {
  rotation_matrix <- x$rotation
  # subcloud coordinates of PC1
  c(x_coord = rotation_matrix[1, 1], y_coord = rotation_matrix[2, 1])
}),
axis2 = map(pca, .f = function(x) {
  rotation_matrix <- x$rotation
  # subcloud coordinates of PC2
  c(x_coord = rotation_matrix[1, 2], y_coord = rotation_matrix[2, 2])
}))
```

Here we just transform the coordinates we have obtained above into some workable form. 
```{r}
plot_data <- sub_pca |>
  select(freq_ford, axis1, axis2) |>
  tidyr::unnest_longer(starts_with("axis")) |>
  pivot_wider(names_from = c(axis1_id, axis2_id),
              values_from = c(axis1, axis2)) |>
  rename("axis1_x" = 2, "axis1_y" = 3, "axis2_x" = 4, "axis2_y" = 5) 
```


Select disciplines to focus on.
Get the means of disciplines and coordinates of all individuals 
Merge everything together 

```{r}
# unique(plot_data$freq_ford)
disc_retained <- c(
  "Languages and Literature",
  "History and Archaeology",
  "Economics and Business",
  "Electrical eng., Electronic eng., Information eng.",
  "Physical sciences",
  "Chemical sciences",
  "Biological sciences",
  "Basic medicine", 
  "Health sciences" 
)
glob_data <- pca_projection |>
    filter(pubs_total >= 5)  |> 
    select(PC1, PC2, freq_ford, freq_field)

glob_means <- glob_data |> 
summarise(mean_pc1 = mean(PC1), mean_pc2 = mean(PC2), .by = freq_ford)  |> 
left_join(
  plot_data
)

plot_data_expanded <- glob_means |> 
filter(freq_ford %in% disc_retained) |> 
mutate(all = list(glob_data |> rename(freq_ford_2 = freq_ford))) |> 
unnest(cols = c(all)) |> 
mutate(disc = freq_ford == freq_ford_2) |> 
arrange(disc)   |> 
mutate(freq_ford = factor(freq_ford, levels = disc_retained))

```

Here we actually plot the beast with some ggplot code help from LLM.


```{r}
plot_all <- plot_data_expanded |> 
ggplot(aes(x = PC1, y = PC2, color = disc)) +
geom_point(size = 0.1, alpha = 0.6) +
scale_color_manual(values = c("TRUE" = "#4F4F4F", "FALSE" = "#C0C0C0")) +
  # PC 1 segment in global space
  geom_segment(
    aes(
      x = mean_pc1 - axis1_x,
      y = mean_pc2 - axis1_y,
      xend = mean_pc1 + axis1_x,
      yend = mean_pc2 + axis1_y
    ),
    color = "red", linewidth = 1 ) +
      # PC 2 segment in global space
  geom_segment(
    aes(
      x = mean_pc1 - axis2_x,
      y = mean_pc2 - axis2_y,
      xend = mean_pc1 + axis2_x,
      yend = mean_pc2 + axis2_y
    ),
    color = "blue", linewidth = 1) +

  # Add dummy geoms to create manual legend entries
  geom_segment(
    aes(x = -Inf, y = -Inf, xend = -Inf, yend = -Inf, linetype = "Subcloud PC1"),
    color = "red", linewidth = 1, show.legend = TRUE
  ) +
  geom_segment(
    aes(x = -Inf, y = -Inf, xend = -Inf, yend = -Inf, linetype = "Subcloud PC2"),
    color = "blue", linewidth = 1, show.legend = TRUE
  ) +
  scale_linetype_manual(
    values = c("Subcloud PC1" = "solid", "Subcloud PC2" = "solid"),
    guide = guide_legend(override.aes = list(color = c("red", "blue")))
  ) +
theme_minimal() +
facet_wrap(~freq_ford) 


```

Save the plot because it has too many points to be displayed interactively. 
```{r}
ggsave(here::here("output", "figures", "plot.png"), plot_all, width = 12, height = 8, bg = "white")
``` 


```{r}
topic_names <- name_topics(topmodel)

``` 

```{r}
loadings_df <- as_tibble(pca_src$rotation) |>  
select(PC1, PC2) |> 
mutate(freq_ford = rownames(pca_src$rotation)) |> 
  mutate(freq_ford = abbrev_discs(freq_ford)) |> 
left_join(
  plot_data_expanded |> 
  select(freq_ford, starts_with("axis")) |> 
  distinct() |> 
  select(-starts_with("PC"))|> 
  mutate(freq_ford = abbrev_discs(freq_ford))
  )  |> 
  mutate(freq_ford_2 = ifelse(is.na(axis1_x), "other", freq_ford)) |> 
  mutate(across(starts_with("axis"), ~.x*0.3)) |> 
  na.omit() |> 
  select(-freq_ford) |> 
  mutate(others = list(as_tibble(pca_src$rotation) |>  
select(PC1x = PC1, PC2y = PC2) |> 
mutate(freq_ford = rownames(pca_src$rotation)) |> 
  mutate(freq_ford_1 = abbrev_discs(freq_ford)) )) |> 
  unnest(cols = "others")
```

Original Loadings
```{r}
# Plot loadings
ggplot(loadings_df, aes(x = PC1x, y = PC2y)) +
  geom_point() +
  geom_text(aes(label = freq_ford), hjust = 1.1, vjust = 1.1) +
    geom_segment(
    aes(
      x = 0 - axis1_x,
      y = 0 - axis1_y,
      xend = 0 + axis1_x,
      yend =  axis1_y
    ), color = "red", linewidth = 1 ) +
        geom_segment(
    aes(
      x = 0 - axis2_x,
      y = 0 - axis2_y,
      xend = 0 + axis2_x,
      yend =  axis2_y
    ), color = "blue", linewidth = 1 ) +
  labs(title = "", x = "PC1", y = "PC2") +
  theme_minimal() +
  facet_wrap(~freq_ford_2)
``` 

original scores
```{r}
scores_df <- as_tibble(pca_src$x) |>  
  select(PC1, PC2) |> 
  mutate(topic = rownames(pca_src$x)) |> 
  left_join(
    topic_names  |> 
    mutate(topic_desc = stringr::str_trunc(topic_desc, 10))
  ) 
coords_df <-   plot_data_expanded |> 
  select(freq_ford, starts_with("axis")) |> 
  distinct() |> 
  select(-starts_with("PC"))

ggplot(scores_df, aes(x = PC1, y = PC2)) +
  geom_text(aes(label = topic_desc),check_overlap = TRUE,size = 2) +
    geom_segment(
      data = coords_df |>  mutate(across(starts_with("axis"), ~.x*5)),
    aes(
      x = 0 - axis1_x,
      y = 0 - axis1_y,
      xend = 0 + axis1_x,
      yend =  axis1_y
    ), color = "red", linewidth = 1 ) +
        geom_segment(
           data = coords_df|>  mutate(across(starts_with("axis"), ~.x*4)),
    aes(
      x = 0 - axis2_x,
      y = 0 - axis2_y,
      xend = 0 + axis2_x,
      yend =  axis2_y
    ), color = "blue", linewidth = 1 ) +
  labs(title = "", x = "PC1", y = "PC2") +
  theme_minimal() +
  facet_wrap(~freq_ford)
```